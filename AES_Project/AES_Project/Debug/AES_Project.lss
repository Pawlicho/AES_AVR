
AES_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000922  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000922  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001593  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf9  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000899  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c1  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096a  00000000  00000000  00003d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 00 02 	jmp	0x400	; 0x400 <__ctors_end>
   4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
   8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
   c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  10:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  14:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  18:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  1c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  20:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  24:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  28:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  2c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  30:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  34:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  38:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  3c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  40:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  44:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  48:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  4c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  50:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  54:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  58:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  5c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  60:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  64:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  68:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  6c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  70:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  74:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  78:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  7c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  80:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  84:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  88:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  8c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  90:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  94:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  98:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  9c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  a0:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  a4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  a8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  ac:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  b0:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>

000000b4 <__trampolines_end>:
	...

00000100 <i_sbox>:
 100:	00 02 04 06 08 0a 0c 0e 10 12 14 16 18 1a 1c 1e     ................
 110:	20 22 24 26 28 2a 2c 2e 30 32 34 36 38 3a 3c 3e      "$&(*,.02468:<>
 120:	40 42 44 46 48 4a 4c 4e 50 52 54 56 58 5a 5c 5e     @BDFHJLNPRTVXZ\^
 130:	60 62 64 66 68 6a 6c 6e 70 72 74 76 78 7a 7c 7e     `bdfhjlnprtvxz|~
 140:	80 82 84 86 88 8a 8c 8e 90 92 94 96 98 9a 9c 9e     ................
 150:	a0 a2 a4 a6 a8 aa ac ae b0 b2 b4 b6 b8 ba bc be     ................
 160:	c0 c2 c4 c6 c8 ca cc ce d0 d2 d4 d6 d8 da dc de     ................
 170:	e0 e2 e4 e6 e8 ea ec ee f0 f2 f4 f6 f8 fa fc fe     ................
 180:	1b 19 1f 1d 13 11 17 15 0b 09 0f 0d 03 01 07 05     ................
 190:	3b 39 3f 3d 33 31 37 35 2b 29 2f 2d 23 21 27 25     ;9?=3175+)/-#!'%
 1a0:	5b 59 5f 5d 53 51 57 55 4b 49 4f 4d 43 41 47 45     [Y_]SQWUKIOMCAGE
 1b0:	7b 79 7f 7d 73 71 77 75 6b 69 6f 6d 63 61 67 65     {y.}sqwukiomcage
 1c0:	9b 99 9f 9d 93 91 97 95 8b 89 8f 8d 83 81 87 85     ................
 1d0:	bb b9 bf bd b3 b1 b7 b5 ab a9 af ad a3 a1 a7 a5     ................
 1e0:	db d9 df dd d3 d1 d7 d5 cb c9 cf cd c3 c1 c7 c5     ................
 1f0:	fb f9 ff fd f3 f1 f7 f5 eb e9 ef ed e3 e1 e7 e5     ................

00000200 <rcon_values>:
 200:	00 01 02 04 08 10 20 40 80 1b 36 00 00 00 00 00     ...... @..6.....
	...

00000300 <sbox>:
 300:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 310:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 320:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 330:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 340:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 350:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 360:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 370:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 380:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 390:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 3a0:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 3b0:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 3c0:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 3d0:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 3e0:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 3f0:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000400 <__ctors_end>:
 400:	11 24       	eor	r1, r1
 402:	1f be       	out	0x3f, r1	; 63
 404:	cf ef       	ldi	r28, 0xFF	; 255
 406:	d8 e0       	ldi	r29, 0x08	; 8
 408:	de bf       	out	0x3e, r29	; 62
 40a:	cd bf       	out	0x3d, r28	; 61

0000040c <__do_copy_data>:
 40c:	11 e0       	ldi	r17, 0x01	; 1
 40e:	a0 e0       	ldi	r26, 0x00	; 0
 410:	b1 e0       	ldi	r27, 0x01	; 1
 412:	e2 e2       	ldi	r30, 0x22	; 34
 414:	f9 e0       	ldi	r31, 0x09	; 9
 416:	02 c0       	rjmp	.+4      	; 0x41c <__do_copy_data+0x10>
 418:	05 90       	lpm	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	a0 31       	cpi	r26, 0x10	; 16
 41e:	b1 07       	cpc	r27, r17
 420:	d9 f7       	brne	.-10     	; 0x418 <__do_copy_data+0xc>
 422:	0e 94 5e 04 	call	0x8bc	; 0x8bc <main>
 426:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_exit>

0000042a <__bad_interrupt>:
 42a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000042e <i_add_round_key>:
    for(uint8_t word = 0; word > 15; word++)
    {
        state_matrix[word] = output[word];
    }

}
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	60 97       	sbiw	r28, 0x10	; 16
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	db 01       	movw	r26, r22
 444:	ec 91       	ld	r30, X
 446:	e1 50       	subi	r30, 0x01	; 1
 448:	ec 93       	st	X, r30
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	e8 0f       	add	r30, r24
 456:	f9 1f       	adc	r31, r25
 458:	80 e1       	ldi	r24, 0x10	; 16
 45a:	de 01       	movw	r26, r28
 45c:	11 96       	adiw	r26, 0x01	; 1
 45e:	01 90       	ld	r0, Z+
 460:	0d 92       	st	X+, r0
 462:	8a 95       	dec	r24
 464:	e1 f7       	brne	.-8      	; 0x45e <i_add_round_key+0x30>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	10 c0       	rjmp	.+32     	; 0x48a <i_add_round_key+0x5c>
 46a:	82 2f       	mov	r24, r18
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	fa 01       	movw	r30, r20
 470:	e8 0f       	add	r30, r24
 472:	f9 1f       	adc	r31, r25
 474:	a1 e0       	ldi	r26, 0x01	; 1
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	ac 0f       	add	r26, r28
 47a:	bd 1f       	adc	r27, r29
 47c:	a8 0f       	add	r26, r24
 47e:	b9 1f       	adc	r27, r25
 480:	8c 91       	ld	r24, X
 482:	90 81       	ld	r25, Z
 484:	89 27       	eor	r24, r25
 486:	80 83       	st	Z, r24
 488:	2f 5f       	subi	r18, 0xFF	; 255
 48a:	20 31       	cpi	r18, 0x10	; 16
 48c:	70 f3       	brcs	.-36     	; 0x46a <i_add_round_key+0x3c>
 48e:	60 96       	adiw	r28, 0x10	; 16
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <i_substitute_bytes>:
 4a0:	9c 01       	movw	r18, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0a c0       	rjmp	.+20     	; 0x4ba <i_substitute_bytes+0x1a>
 4a6:	d9 01       	movw	r26, r18
 4a8:	a9 0f       	add	r26, r25
 4aa:	b1 1d       	adc	r27, r1
 4ac:	ec 91       	ld	r30, X
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	e0 50       	subi	r30, 0x00	; 0
 4b2:	ff 4f       	sbci	r31, 0xFF	; 255
 4b4:	e4 91       	lpm	r30, Z
 4b6:	ec 93       	st	X, r30
 4b8:	9f 5f       	subi	r25, 0xFF	; 255
 4ba:	90 31       	cpi	r25, 0x10	; 16
 4bc:	a0 f3       	brcs	.-24     	; 0x4a6 <i_substitute_bytes+0x6>
 4be:	08 95       	ret

000004c0 <rotate_right>:
 4c0:	e6 2f       	mov	r30, r22
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	e8 0f       	add	r30, r24
 4ce:	f9 1f       	adc	r31, r25
 4d0:	80 81       	ld	r24, Z
 4d2:	93 81       	ldd	r25, Z+3	; 0x03
 4d4:	90 83       	st	Z, r25
 4d6:	92 81       	ldd	r25, Z+2	; 0x02
 4d8:	93 83       	std	Z+3, r25	; 0x03
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	92 83       	std	Z+2, r25	; 0x02
 4de:	81 83       	std	Z+1, r24	; 0x01
 4e0:	08 95       	ret

000004e2 <i_shift_rows>:
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	60 97       	sbiw	r28, 0x10	; 16
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	bc 01       	movw	r22, r24
 4fc:	a0 e0       	ldi	r26, 0x00	; 0
 4fe:	22 c0       	rjmp	.+68     	; 0x544 <i_shift_rows+0x62>
 500:	4a 2f       	mov	r20, r26
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	fa 01       	movw	r30, r20
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	29 2f       	mov	r18, r25
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	e6 0f       	add	r30, r22
 518:	f7 1f       	adc	r31, r23
 51a:	80 81       	ld	r24, Z
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	e1 e0       	ldi	r30, 0x01	; 1
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ec 0f       	add	r30, r28
 52a:	fd 1f       	adc	r31, r29
 52c:	2e 0f       	add	r18, r30
 52e:	3f 1f       	adc	r19, r31
 530:	f9 01       	movw	r30, r18
 532:	e4 0f       	add	r30, r20
 534:	f5 1f       	adc	r31, r21
 536:	80 83       	st	Z, r24
 538:	9f 5f       	subi	r25, 0xFF	; 255
 53a:	01 c0       	rjmp	.+2      	; 0x53e <i_shift_rows+0x5c>
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	94 30       	cpi	r25, 0x04	; 4
 540:	f8 f2       	brcs	.-66     	; 0x500 <i_shift_rows+0x1e>
 542:	af 5f       	subi	r26, 0xFF	; 255
 544:	a4 30       	cpi	r26, 0x04	; 4
 546:	d0 f3       	brcs	.-12     	; 0x53c <i_shift_rows+0x5a>
 548:	01 e0       	ldi	r16, 0x01	; 1
 54a:	0b c0       	rjmp	.+22     	; 0x562 <i_shift_rows+0x80>
 54c:	60 2f       	mov	r22, r16
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	0e 94 60 02 	call	0x4c0	; 0x4c0 <rotate_right>
 556:	1f 5f       	subi	r17, 0xFF	; 255
 558:	01 c0       	rjmp	.+2      	; 0x55c <i_shift_rows+0x7a>
 55a:	11 e0       	ldi	r17, 0x01	; 1
 55c:	10 17       	cp	r17, r16
 55e:	b0 f3       	brcs	.-20     	; 0x54c <i_shift_rows+0x6a>
 560:	0f 5f       	subi	r16, 0xFF	; 255
 562:	04 30       	cpi	r16, 0x04	; 4
 564:	d0 f3       	brcs	.-12     	; 0x55a <i_shift_rows+0x78>
 566:	60 96       	adiw	r28, 0x10	; 16
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	0f be       	out	0x3f, r0	; 63
 570:	cd bf       	out	0x3d, r28	; 61
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	08 95       	ret

0000057c <aes_decrypt>:

void aes_decrypt(uint8_t* expand_key, uint8_t* plain_text)
{
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	1f 92       	push	r1
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	6c 01       	movw	r12, r24
 592:	8b 01       	movw	r16, r22

    uint8_t round_number = NUM_ROUNDS+1;
 594:	8b e0       	ldi	r24, 0x0B	; 11
 596:	89 83       	std	Y+1, r24	; 0x01
    i_add_round_key(expand_key, &round_number, plain_text);
 598:	ab 01       	movw	r20, r22
 59a:	be 01       	movw	r22, r28
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	c6 01       	movw	r24, r12
 5a2:	0e 94 17 02 	call	0x42e	; 0x42e <i_add_round_key>
    i_shift_rows(plain_text);
 5a6:	c8 01       	movw	r24, r16
 5a8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i_shift_rows>
    i_substitute_bytes(plain_text);
 5ac:	c8 01       	movw	r24, r16
 5ae:	0e 94 50 02 	call	0x4a0	; 0x4a0 <i_substitute_bytes>

    for(uint8_t round_ctr = 0; round_ctr < NUM_ROUNDS-1; round_ctr++)
 5b2:	f1 2c       	mov	r15, r1
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <aes_decrypt+0x56>
    {
        i_add_round_key(expand_key, &round_number, plain_text);
 5b6:	a8 01       	movw	r20, r16
 5b8:	be 01       	movw	r22, r28
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	c6 01       	movw	r24, r12
 5c0:	0e 94 17 02 	call	0x42e	; 0x42e <i_add_round_key>
        i_mix_columns(plain_text);
        i_shift_rows(plain_text);
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <i_shift_rows>
        i_substitute_bytes(plain_text);
 5ca:	c8 01       	movw	r24, r16
 5cc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <i_substitute_bytes>
    uint8_t round_number = NUM_ROUNDS+1;
    i_add_round_key(expand_key, &round_number, plain_text);
    i_shift_rows(plain_text);
    i_substitute_bytes(plain_text);

    for(uint8_t round_ctr = 0; round_ctr < NUM_ROUNDS-1; round_ctr++)
 5d0:	f3 94       	inc	r15
 5d2:	88 e0       	ldi	r24, 0x08	; 8
 5d4:	8f 15       	cp	r24, r15
 5d6:	78 f7       	brcc	.-34     	; 0x5b6 <aes_decrypt+0x3a>
        i_add_round_key(expand_key, &round_number, plain_text);
        i_mix_columns(plain_text);
        i_shift_rows(plain_text);
        i_substitute_bytes(plain_text);
    }
    i_add_round_key(expand_key, &round_number, plain_text);
 5d8:	a8 01       	movw	r20, r16
 5da:	be 01       	movw	r22, r28
 5dc:	6f 5f       	subi	r22, 0xFF	; 255
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	c6 01       	movw	r24, r12
 5e2:	0e 94 17 02 	call	0x42e	; 0x42e <i_add_round_key>

    return;

 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	df 90       	pop	r13
 5f4:	cf 90       	pop	r12
 5f6:	08 95       	ret

000005f8 <add_round_key>:
    /* Rewriting output into state_matrix */
    for(uint8_t word =0; word>15; word++)
    {
        state_matrix[word] = output[word];
    }
}
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	60 97       	sbiw	r28, 0x10	; 16
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	db 01       	movw	r26, r22
 60e:	ec 91       	ld	r30, X
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	e8 0f       	add	r30, r24
 61c:	f9 1f       	adc	r31, r25
 61e:	80 e1       	ldi	r24, 0x10	; 16
 620:	de 01       	movw	r26, r28
 622:	11 96       	adiw	r26, 0x01	; 1
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	8a 95       	dec	r24
 62a:	e1 f7       	brne	.-8      	; 0x624 <add_round_key+0x2c>
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	10 c0       	rjmp	.+32     	; 0x650 <add_round_key+0x58>
 630:	82 2f       	mov	r24, r18
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	fa 01       	movw	r30, r20
 636:	e8 0f       	add	r30, r24
 638:	f9 1f       	adc	r31, r25
 63a:	a1 e0       	ldi	r26, 0x01	; 1
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	ac 0f       	add	r26, r28
 640:	bd 1f       	adc	r27, r29
 642:	a8 0f       	add	r26, r24
 644:	b9 1f       	adc	r27, r25
 646:	8c 91       	ld	r24, X
 648:	90 81       	ld	r25, Z
 64a:	89 27       	eor	r24, r25
 64c:	80 83       	st	Z, r24
 64e:	2f 5f       	subi	r18, 0xFF	; 255
 650:	20 31       	cpi	r18, 0x10	; 16
 652:	70 f3       	brcs	.-36     	; 0x630 <add_round_key+0x38>
 654:	fb 01       	movw	r30, r22
 656:	80 81       	ld	r24, Z
 658:	8f 5f       	subi	r24, 0xFF	; 255
 65a:	80 83       	st	Z, r24
 65c:	60 96       	adiw	r28, 0x10	; 16
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <substitute_bytes>:
 66e:	9c 01       	movw	r18, r24
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0a c0       	rjmp	.+20     	; 0x688 <substitute_bytes+0x1a>
 674:	d9 01       	movw	r26, r18
 676:	a9 0f       	add	r26, r25
 678:	b1 1d       	adc	r27, r1
 67a:	ec 91       	ld	r30, X
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	e0 50       	subi	r30, 0x00	; 0
 680:	fd 4f       	sbci	r31, 0xFD	; 253
 682:	e4 91       	lpm	r30, Z
 684:	ec 93       	st	X, r30
 686:	9f 5f       	subi	r25, 0xFF	; 255
 688:	90 31       	cpi	r25, 0x10	; 16
 68a:	a0 f3       	brcs	.-24     	; 0x674 <substitute_bytes+0x6>
 68c:	08 95       	ret

0000068e <rotate_left>:
 68e:	e6 2f       	mov	r30, r22
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	e8 0f       	add	r30, r24
 69c:	f9 1f       	adc	r31, r25
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	90 81       	ld	r25, Z
 6a2:	93 83       	std	Z+3, r25	; 0x03
 6a4:	91 81       	ldd	r25, Z+1	; 0x01
 6a6:	90 83       	st	Z, r25
 6a8:	92 81       	ldd	r25, Z+2	; 0x02
 6aa:	91 83       	std	Z+1, r25	; 0x01
 6ac:	82 83       	std	Z+2, r24	; 0x02
 6ae:	08 95       	ret

000006b0 <shift_rows>:
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
 6bc:	60 97       	sbiw	r28, 0x10	; 16
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	bc 01       	movw	r22, r24
 6ca:	a0 e0       	ldi	r26, 0x00	; 0
 6cc:	22 c0       	rjmp	.+68     	; 0x712 <shift_rows+0x62>
 6ce:	4a 2f       	mov	r20, r26
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	fa 01       	movw	r30, r20
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	29 2f       	mov	r18, r25
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	e2 0f       	add	r30, r18
 6e2:	f3 1f       	adc	r31, r19
 6e4:	e6 0f       	add	r30, r22
 6e6:	f7 1f       	adc	r31, r23
 6e8:	80 81       	ld	r24, Z
 6ea:	22 0f       	add	r18, r18
 6ec:	33 1f       	adc	r19, r19
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	e1 e0       	ldi	r30, 0x01	; 1
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ec 0f       	add	r30, r28
 6f8:	fd 1f       	adc	r31, r29
 6fa:	2e 0f       	add	r18, r30
 6fc:	3f 1f       	adc	r19, r31
 6fe:	f9 01       	movw	r30, r18
 700:	e4 0f       	add	r30, r20
 702:	f5 1f       	adc	r31, r21
 704:	80 83       	st	Z, r24
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	01 c0       	rjmp	.+2      	; 0x70c <shift_rows+0x5c>
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	94 30       	cpi	r25, 0x04	; 4
 70e:	f8 f2       	brcs	.-66     	; 0x6ce <shift_rows+0x1e>
 710:	af 5f       	subi	r26, 0xFF	; 255
 712:	a4 30       	cpi	r26, 0x04	; 4
 714:	d0 f3       	brcs	.-12     	; 0x70a <shift_rows+0x5a>
 716:	01 e0       	ldi	r16, 0x01	; 1
 718:	0b c0       	rjmp	.+22     	; 0x730 <shift_rows+0x80>
 71a:	60 2f       	mov	r22, r16
 71c:	ce 01       	movw	r24, r28
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	0e 94 47 03 	call	0x68e	; 0x68e <rotate_left>
 724:	1f 5f       	subi	r17, 0xFF	; 255
 726:	01 c0       	rjmp	.+2      	; 0x72a <shift_rows+0x7a>
 728:	11 e0       	ldi	r17, 0x01	; 1
 72a:	10 17       	cp	r17, r16
 72c:	b0 f3       	brcs	.-20     	; 0x71a <shift_rows+0x6a>
 72e:	0f 5f       	subi	r16, 0xFF	; 255
 730:	04 30       	cpi	r16, 0x04	; 4
 732:	d0 f3       	brcs	.-12     	; 0x728 <shift_rows+0x78>
 734:	60 96       	adiw	r28, 0x10	; 16
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <aes_encrypt>:

void aes_encrypt(uint8_t* expand_key, uint8_t* plain_text)
{
 74a:	cf 92       	push	r12
 74c:	df 92       	push	r13
 74e:	ff 92       	push	r15
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	1f 92       	push	r1
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	6c 01       	movw	r12, r24
 760:	8b 01       	movw	r16, r22

    /* Initiating */
    uint8_t round_number = 0;
 762:	19 82       	std	Y+1, r1	; 0x01
    add_round_key(expand_key, &round_number, plain_text);
 764:	ab 01       	movw	r20, r22
 766:	be 01       	movw	r22, r28
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <add_round_key>
    

    for(uint8_t round_ctr = 0; round_ctr< NUM_ROUNDS-1; round_ctr++)
 770:	f1 2c       	mov	r15, r1
 772:	0e c0       	rjmp	.+28     	; 0x790 <aes_encrypt+0x46>
    {
        substitute_bytes(plain_text);
 774:	c8 01       	movw	r24, r16
 776:	0e 94 37 03 	call	0x66e	; 0x66e <substitute_bytes>
        shift_rows(plain_text);
 77a:	c8 01       	movw	r24, r16
 77c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <shift_rows>
        mix_columns(plain_text);
        add_round_key(expand_key, &round_number, plain_text);
 780:	a8 01       	movw	r20, r16
 782:	be 01       	movw	r22, r28
 784:	6f 5f       	subi	r22, 0xFF	; 255
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	c6 01       	movw	r24, r12
 78a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <add_round_key>
    /* Initiating */
    uint8_t round_number = 0;
    add_round_key(expand_key, &round_number, plain_text);
    

    for(uint8_t round_ctr = 0; round_ctr< NUM_ROUNDS-1; round_ctr++)
 78e:	f3 94       	inc	r15
 790:	88 e0       	ldi	r24, 0x08	; 8
 792:	8f 15       	cp	r24, r15
 794:	78 f7       	brcc	.-34     	; 0x774 <aes_encrypt+0x2a>
        shift_rows(plain_text);
        mix_columns(plain_text);
        add_round_key(expand_key, &round_number, plain_text);
    }

    substitute_bytes(plain_text);
 796:	c8 01       	movw	r24, r16
 798:	0e 94 37 03 	call	0x66e	; 0x66e <substitute_bytes>
    shift_rows(plain_text);
 79c:	c8 01       	movw	r24, r16
 79e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <shift_rows>
    add_round_key(expand_key, &round_number, plain_text);
 7a2:	a8 01       	movw	r20, r16
 7a4:	be 01       	movw	r22, r28
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	c6 01       	movw	r24, r12
 7ac:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <add_round_key>

    return;

}
 7b0:	0f 90       	pop	r0
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	ff 90       	pop	r15
 7bc:	df 90       	pop	r13
 7be:	cf 90       	pop	r12
 7c0:	08 95       	ret

000007c2 <expand_key>:

void expand_key(uint8_t* key, uint8_t* expanded_key)
{
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	fc 01       	movw	r30, r24

    uint8_t temp[4], swap;

    /* Initial copy of original 16 bytes of key */
    memcpy(expanded_key, key, ROUND_KEY_WORDS_NUMBER*4);
 7ce:	90 e1       	ldi	r25, 0x10	; 16
 7d0:	db 01       	movw	r26, r22
 7d2:	01 90       	ld	r0, Z+
 7d4:	0d 92       	st	X+, r0
 7d6:	9a 95       	dec	r25
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <expand_key+0x10>

    for (int8_t i = ROUND_KEY_WORDS_NUMBER; i < 4 * (NUM_ROUNDS + 1); i++)
 7da:	44 e0       	ldi	r20, 0x04	; 4
 7dc:	66 c0       	rjmp	.+204    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
    {

        /* Copying last 4 bytes of expanded key into temporary vector and rotating */
        temp[0] = expanded_key[4*i - 4];
 7de:	24 e0       	ldi	r18, 0x04	; 4
 7e0:	42 02       	muls	r20, r18
 7e2:	c0 01       	movw	r24, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	9b 01       	movw	r18, r22
 7e8:	28 0f       	add	r18, r24
 7ea:	39 1f       	adc	r19, r25
 7ec:	f9 01       	movw	r30, r18
 7ee:	34 97       	sbiw	r30, 0x04	; 4
 7f0:	f0 81       	ld	r31, Z
 7f2:	5f 2f       	mov	r21, r31
        temp[1] = expanded_key[4*i - 3];
 7f4:	d9 01       	movw	r26, r18
 7f6:	13 97       	sbiw	r26, 0x03	; 3
 7f8:	bc 91       	ld	r27, X
 7fa:	0b 2f       	mov	r16, r27
        temp[2] = expanded_key[4*i - 2];
 7fc:	e9 01       	movw	r28, r18
 7fe:	22 97       	sbiw	r28, 0x02	; 2
 800:	a8 81       	ld	r26, Y
 802:	fa 2e       	mov	r15, r26
        temp[3] = expanded_key[4*i - 1];
 804:	21 96       	adiw	r28, 0x01	; 1
 806:	28 81       	ld	r18, Y
 808:	32 2f       	mov	r19, r18


        //need for change
        if (!(i % ROUND_KEY_WORDS_NUMBER))
 80a:	14 2f       	mov	r17, r20
 80c:	c4 2f       	mov	r28, r20
 80e:	c3 70       	andi	r28, 0x03	; 3
 810:	21 f5       	brne	.+72     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
        {
            /* Substituting bytes from sbox */
            swap = temp[3];
            temp[3] = pgm_read_byte(&sbox[temp[0]]);
 812:	ef 2f       	mov	r30, r31
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	e0 50       	subi	r30, 0x00	; 0
 818:	fd 4f       	sbci	r31, 0xFD	; 253
 81a:	34 91       	lpm	r19, Z
            temp[0] = pgm_read_byte(&sbox[temp[1]]) ^ pgm_read_byte(&rcon_values[i/ROUND_KEY_WORDS_NUMBER]);
 81c:	eb 2f       	mov	r30, r27
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	e0 50       	subi	r30, 0x00	; 0
 822:	fd 4f       	sbci	r31, 0xFD	; 253
 824:	54 91       	lpm	r21, Z
 826:	e4 2f       	mov	r30, r20
 828:	44 23       	and	r20, r20
 82a:	14 f4       	brge	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	e3 e0       	ldi	r30, 0x03	; 3
 82e:	e4 0f       	add	r30, r20
 830:	e5 95       	asr	r30
 832:	e5 95       	asr	r30
 834:	0e 2e       	mov	r0, r30
 836:	00 0c       	add	r0, r0
 838:	ff 0b       	sbc	r31, r31
 83a:	e0 50       	subi	r30, 0x00	; 0
 83c:	fe 4f       	sbci	r31, 0xFE	; 254
 83e:	e4 91       	lpm	r30, Z
 840:	5e 27       	eor	r21, r30
            temp[1] = pgm_read_byte(&sbox[temp[2]]);
 842:	ea 2f       	mov	r30, r26
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	e0 50       	subi	r30, 0x00	; 0
 848:	fd 4f       	sbci	r31, 0xFD	; 253
 84a:	e4 91       	lpm	r30, Z
 84c:	0e 2f       	mov	r16, r30
            temp[2] = pgm_read_byte(&sbox[swap]);
 84e:	e2 2f       	mov	r30, r18
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	e0 50       	subi	r30, 0x00	; 0
 854:	fd 4f       	sbci	r31, 0xFD	; 253
 856:	e4 91       	lpm	r30, Z
 858:	fe 2e       	mov	r15, r30

        }

        /* Temp vector XOR last 4 bytes befor i(round) bytes before key end */
        expanded_key[4*i] = temp[0] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER];
 85a:	eb 01       	movw	r28, r22
 85c:	c8 0f       	add	r28, r24
 85e:	d9 1f       	adc	r29, r25
 860:	de 01       	movw	r26, r28
 862:	50 97       	sbiw	r26, 0x10	; 16
 864:	2c 91       	ld	r18, X
 866:	52 27       	eor	r21, r18
 868:	58 83       	st	Y, r21
        expanded_key[4*i + 1] = temp[1] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER + 1];
 86a:	dc 01       	movw	r26, r24
 86c:	11 96       	adiw	r26, 0x01	; 1
 86e:	a6 0f       	add	r26, r22
 870:	b7 1f       	adc	r27, r23
 872:	ae 01       	movw	r20, r28
 874:	4f 50       	subi	r20, 0x0F	; 15
 876:	51 09       	sbc	r21, r1
 878:	fa 01       	movw	r30, r20
 87a:	20 81       	ld	r18, Z
 87c:	20 27       	eor	r18, r16
 87e:	2c 93       	st	X, r18
        expanded_key[4*i + 2] = temp[2] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER + 2];
 880:	dc 01       	movw	r26, r24
 882:	12 96       	adiw	r26, 0x02	; 2
 884:	a6 0f       	add	r26, r22
 886:	b7 1f       	adc	r27, r23
 888:	4f 5f       	subi	r20, 0xFF	; 255
 88a:	5f 4f       	sbci	r21, 0xFF	; 255
 88c:	fa 01       	movw	r30, r20
 88e:	20 81       	ld	r18, Z
 890:	ef 2d       	mov	r30, r15
 892:	e2 27       	eor	r30, r18
 894:	ec 93       	st	X, r30
        expanded_key[4*i + 3] = temp[3] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER + 3];
 896:	03 96       	adiw	r24, 0x03	; 3
 898:	db 01       	movw	r26, r22
 89a:	a8 0f       	add	r26, r24
 89c:	b9 1f       	adc	r27, r25
 89e:	2d 97       	sbiw	r28, 0x0d	; 13
 8a0:	e8 81       	ld	r30, Y
 8a2:	3e 27       	eor	r19, r30
 8a4:	3c 93       	st	X, r19
    uint8_t temp[4], swap;

    /* Initial copy of original 16 bytes of key */
    memcpy(expanded_key, key, ROUND_KEY_WORDS_NUMBER*4);

    for (int8_t i = ROUND_KEY_WORDS_NUMBER; i < 4 * (NUM_ROUNDS + 1); i++)
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	41 0f       	add	r20, r17
 8aa:	4c 32       	cpi	r20, 0x2C	; 44
 8ac:	0c f4       	brge	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ae:	97 cf       	rjmp	.-210    	; 0x7de <expand_key+0x1c>
        expanded_key[4*i + 2] = temp[2] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER + 2];
        expanded_key[4*i + 3] = temp[3] ^ expanded_key[4*i - 4*ROUND_KEY_WORDS_NUMBER + 3];

    }

}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	ff 90       	pop	r15
 8ba:	08 95       	ret

000008bc <main>:
#include <avr/io.h>
#include "aes_encryption.h"
#include "aes_decryption.h"

int main(void)
{
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	c0 5d       	subi	r28, 0xD0	; 208
 8c6:	d1 09       	sbc	r29, r1
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	f8 94       	cli
 8cc:	de bf       	out	0x3e, r29	; 62
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    while (1) 
    {
		uint8_t testowy_klucz[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8d2:	ce 01       	movw	r24, r28
 8d4:	8f 53       	subi	r24, 0x3F	; 63
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	20 e1       	ldi	r18, 0x10	; 16
 8da:	fc 01       	movw	r30, r24
 8dc:	11 92       	st	Z+, r1
 8de:	2a 95       	dec	r18
 8e0:	e9 f7       	brne	.-6      	; 0x8dc <main+0x20>
		uint8_t testowy_tekst[16] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8e2:	20 e1       	ldi	r18, 0x10	; 16
 8e4:	e0 e0       	ldi	r30, 0x00	; 0
 8e6:	f1 e0       	ldi	r31, 0x01	; 1
 8e8:	de 01       	movw	r26, r28
 8ea:	af 54       	subi	r26, 0x4F	; 79
 8ec:	bf 4f       	sbci	r27, 0xFF	; 255
 8ee:	01 90       	ld	r0, Z+
 8f0:	0d 92       	st	X+, r0
 8f2:	2a 95       	dec	r18
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <main+0x32>
		uint8_t extended_klucz[176];
		expand_key(testowy_klucz, extended_klucz);
 8f6:	be 01       	movw	r22, r28
 8f8:	6f 5f       	subi	r22, 0xFF	; 255
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <expand_key>
		aes_encrypt(extended_klucz, testowy_tekst);
 900:	be 01       	movw	r22, r28
 902:	6f 54       	subi	r22, 0x4F	; 79
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	0e 94 a5 03 	call	0x74a	; 0x74a <aes_encrypt>
		aes_decrypt(extended_klucz, testowy_tekst);
 90e:	be 01       	movw	r22, r28
 910:	6f 54       	subi	r22, 0x4F	; 79
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	ce 01       	movw	r24, r28
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	0e 94 be 02 	call	0x57c	; 0x57c <aes_decrypt>
 91c:	da cf       	rjmp	.-76     	; 0x8d2 <main+0x16>

0000091e <_exit>:
 91e:	f8 94       	cli

00000920 <__stop_program>:
 920:	ff cf       	rjmp	.-2      	; 0x920 <__stop_program>
